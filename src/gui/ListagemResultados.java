package gui;

import backend.Loja;
import backend.ProdutoLoja;
import backend.Sistema;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author Adão Teixeira, Cláudia Ribeiro, José Ribeiro
 *
 */
public class ListagemResultados extends javax.swing.JPanel {

    private Sistema sistema;
    private JanelaPrincipal principal;
    private ArrayList<ProdutoLoja> listaResultados;
    private AbstractTableModel modeloTabela;

    public ListagemResultados(Sistema sistema, JanelaPrincipal principal, ArrayList<ProdutoLoja> listaResultados, String pesquisa) {
        initComponents();
        this.sistema = sistema;
        this.listaResultados = listaResultados;
        this.principal = principal;
        this.modeloTabela = criarTabelaModelo();
        tabListagemResultados.setModel(modeloTabela);
        

        if (listaResultados.isEmpty()) {
            labelColocarNumeroResultados.setText("0");
            labelProcura.setText(pesquisa);
            labelColocarPrecoMax.setText("0.0 €");
            labelColocarPrecoMin.setText("0.0 €");
            
        } else {
            labelColocarNumeroResultados.setText(String.valueOf(listaResultados.size()));
            labelProcura.setText(pesquisa);
            labelColocarPrecoMin.setText(String.valueOf(listaResultados.get(0).getPreco()) + " €");
            labelColocarPrecoMax.setText(String.valueOf(listaResultados.get(listaResultados.size() - 1).getPreco()) + " €");
        }
    }

    private AbstractTableModel criarTabelaModelo() {
        String[] nomeColunas = {"Código de Barras","Produto","Loja", "Preço"};

        return new AbstractTableModel() {     //Desenhar a tabela
            @Override
            public String getColumnName(int column) {
                return nomeColunas[column];
            }

            @Override
            public int getRowCount() {
                //Retorna o número de linhas que a tabela deverá ter
                return listaResultados.size();
            }

            @Override
            public int getColumnCount() {
                //Retorna o número de colunas que a tabela deverá ter
                return nomeColunas.length;
            }

            @Override
            public Object getValueAt(int rowIndex, int columnIndex) {
                /*
                Este método é invocado quando se pretende "popular" cada uma das células da tabela
                Se a tabela tem 3 linhas e 2 colunas existem 6 células (3*2), logo o método será invocado 6 vezes
                    rowIndex representa a linha da célula (0 a rowCount -1)
                    columnIndex representa a coluna da célula (0 a ColumnCount -1)
                 */
                switch (columnIndex) {
                    case 0:
                        return listaResultados.get(rowIndex).getCodigoBarras();
                    case 1:
                        return listaResultados.get(rowIndex).getInfoProduto();
                    case 2:
                        return listaResultados.get(rowIndex).getLoja().getNome();
                    case 3:
                        return listaResultados.get(rowIndex).getPreco() + " €";
                    default:
                        return "";
                }
            }
        };
    }

    //Atualiza a minha tabela de
    public void atualizar() {
        modeloTabela.fireTableDataChanged();
    }

    public void visitarLoja() {
        if (tabListagemResultados.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um produto p.f.");
        } else {
            //Devolve o numero da linha selecionada
            int rowIndex = tabListagemResultados.getSelectedRow();

            Loja lojaSeleciona = listaResultados.get(rowIndex).getLoja();

            //Desconta um clique na loja, do produto que estiver selecionado
            lojaSeleciona.cliqueUtilizado();
            JOptionPane.showMessageDialog(this, "A " + lojaSeleciona.getNome() + " agradece a sua visita");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        tabListagemResultados = new javax.swing.JTable();
        buttonLimpar = new javax.swing.JButton();
        buttonVisitarLoja = new javax.swing.JButton();
        jLabelProcuraPor = new javax.swing.JLabel();
        jLabelReusltados = new javax.swing.JLabel();
        labelProcura = new javax.swing.JLabel();
        labelColocarNumeroResultados = new javax.swing.JLabel();
        labelPrecoMin = new javax.swing.JLabel();
        labelPrecoMax = new javax.swing.JLabel();
        labelColocarPrecoMin = new javax.swing.JLabel();
        labelColocarPrecoMax = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(790, 386));

        jScrollPane.setBackground(new java.awt.Color(255, 255, 255));

        tabListagemResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabListagemResultados.getTableHeader().setReorderingAllowed(false);
        jScrollPane.setViewportView(tabListagemResultados);

        buttonLimpar.setText("Limpar");
        buttonLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLimparActionPerformed(evt);
            }
        });

        buttonVisitarLoja.setText("Vistar Loja");
        buttonVisitarLoja.setToolTipText("");
        buttonVisitarLoja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonVisitarLojaActionPerformed(evt);
            }
        });

        jLabelProcuraPor.setText("Procura por:");

        jLabelReusltados.setText("Resultados:");

        labelProcura.setToolTipText("");

        labelPrecoMin.setText("Preço min:");

        labelPrecoMax.setText("Preço máx:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 790, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonVisitarLoja)
                        .addGap(18, 18, 18)
                        .addComponent(buttonLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelReusltados)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelColocarNumeroResultados)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelPrecoMax))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelProcuraPor)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelProcura)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelPrecoMin)))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelColocarPrecoMin)
                            .addComponent(labelColocarPrecoMax))
                        .addGap(78, 78, 78))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelProcuraPor)
                    .addComponent(labelProcura)
                    .addComponent(labelPrecoMin)
                    .addComponent(labelColocarPrecoMin))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelReusltados)
                    .addComponent(labelColocarNumeroResultados)
                    .addComponent(labelPrecoMax)
                    .addComponent(labelColocarPrecoMax))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonVisitarLoja, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonVisitarLojaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonVisitarLojaActionPerformed
        visitarLoja();
    }//GEN-LAST:event_buttonVisitarLojaActionPerformed

    private void buttonLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLimparActionPerformed
        principal.voltarAmbientePrincipal();
    }//GEN-LAST:event_buttonLimparActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonLimpar;
    private javax.swing.JButton buttonVisitarLoja;
    private javax.swing.JLabel jLabelProcuraPor;
    private javax.swing.JLabel jLabelReusltados;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JLabel labelColocarNumeroResultados;
    private javax.swing.JLabel labelColocarPrecoMax;
    private javax.swing.JLabel labelColocarPrecoMin;
    private javax.swing.JLabel labelPrecoMax;
    private javax.swing.JLabel labelPrecoMin;
    private javax.swing.JLabel labelProcura;
    private javax.swing.JTable tabListagemResultados;
    // End of variables declaration//GEN-END:variables
}
